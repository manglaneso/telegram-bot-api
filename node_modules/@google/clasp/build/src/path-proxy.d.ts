/// <reference types="node" />
import path from 'path';
/** A path broken down into a `dir`ectory and a `base` filename */
declare type BrokenPath = Pick<path.ParsedPath, 'dir' | 'base'>;
export declare class PathProxy {
    protected _default: BrokenPath;
    protected _userDefined: string | undefined;
    /**
     * Handles a path to a file.
     *
     * - Constructor requires a default path (directory and filename)
     * - Path can be overridden with the `path` accessor.
     * - The `resolve()` method implements specific rules to define the effective path to the proxied file.
     *
     * @param {BrokenPath} defaultPath default path
     */
    constructor(defaultPath: BrokenPath);
    /**
     * Returns the current (raw and unresolved) defined path to the proxied file.
     *
     * *Note: for most uses, prefer the `resolve()` method in order to retreive a file's path*
     *
     * @returns {string}
     */
    get path(): string;
    /**
     * Sets the current (raw and unresolved) path to the proxied file.
     *
     * *Note: passing an empty string restores the default path*
     */
    set path(userDefined: string);
    /**
     * Returns true if current path is the default.
     *
     * @returns {boolean}
     */
    isDefault(): boolean;
    /**
     * Returns the resolved directory to the proxied file.
     *
     * *Note: for most uses, prefer the `.resolve()` method in order to retreive a file's path*
     *
     * @returns {string}
     */
    get resolvedDir(): string;
    /**
     * Resolves the current active path
     *
     * @returns {string}
     */
    resolve(): string;
}
export {};
